import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from io import BytesIO
import re

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(page_title="Painel de Pedidos Universal", layout="wide")
st.title("üìä Painel Interativo de Pedidos (Google Sheets Autom√°tico)")

# Link do Google Sheets publicado como CSV
sheet_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQFWx-yFNN5rTAua7cTuUh4t9fuAd8lNDAhx-19ovLlcZUj6iEUHaXsQcjlX7UQr09KPA7ekbJYF9kc/pub?output=csv"

try:
    # Ler o CSV do Google Sheets
    df = pd.ExcelFile(pd.read_csv(sheet_url))
    all_sheets = df.sheet_names

    meses = ['JANEIRO', 'FEVEREIRO', 'MAR√áO', 'ABRIL', 'MAIO', 'JUNHO',
             'JULHO', 'AGOSTO', 'SETEMBRO', 'OUTUBRO', 'NOVEMBRO', 'DEZEMBRO']

    consolidated_data = []

    for sheet in all_sheets:
        temp_df = df.parse(sheet)
        if not temp_df.empty and temp_df.shape[1] > 1:
            meses_df = temp_df[temp_df.iloc[:, 0].isin(meses)]

            if not meses_df.empty:
                regioes = temp_df.columns[1:]

                melted_df = meses_df.melt(id_vars=meses_df.columns[0], value_vars=regioes,
                                          var_name='Regi√£o', value_name='Valor')

                melted_df['Pessoa'] = sheet
                melted_df.rename(columns={melted_df.columns[0]: 'M√™s'}, inplace=True)

                consolidated_data.append(melted_df)

    final_df = pd.concat(consolidated_data, ignore_index=True)

    def clean_value(value):
        if isinstance(value, str):
            value = re.sub(r"[^\d,\.]", "", value)
            if value.count('.') > 1:
                parts = value.split('.')
                value = ''.join(parts[:-1]) + '.' + parts[-1]
            if ',' in value:
                value = value.replace('.', '').replace(',', '.')
            try:
                return float(value)
            except:
                return 0.0
        try:
            return float(value)
        except:
            return 0.0

    final_df['Valor'] = final_df['Valor'].apply(clean_value)

    # Filtros interativos
    st.sidebar.header("Filtros")

    pessoas = st.sidebar.multiselect("Pessoa", options=final_df['Pessoa'].unique(), default=final_df['Pessoa'].unique())
    regioes = st.sidebar.multiselect("Regi√£o", options=final_df['Regi√£o'].unique(), default=final_df['Regi√£o'].unique())
    meses_selecionados = st.sidebar.multiselect("M√™s", options=final_df['M√™s'].unique(), default=final_df['M√™s'].unique())

    filtered_df = final_df[
        (final_df['Pessoa'].isin(pessoas)) &
        (final_df['Regi√£o'].isin(regioes)) &
        (final_df['M√™s'].isin(meses_selecionados))
    ]

    # Exibir tabela de dados filtrados
    st.subheader("Base Consolidada Filtrada")
    st.dataframe(filtered_df)

    # Gr√°ficos
    st.subheader("Total por Pessoa")
    total_pessoa = filtered_df.groupby('Pessoa')['Valor'].sum().sort_values(ascending=False)
    fig1, ax1 = plt.subplots()
    total_pessoa.plot(kind='bar', ax=ax1, color='skyblue')
    ax1.set_ylabel('Valor Total (R$)')
    ax1.set_xlabel('Pessoa')
    st.pyplot(fig1)

    st.subheader("Total por Regi√£o")
    total_regiao = filtered_df.groupby('Regi√£o')['Valor'].sum().sort_values(ascending=False)
    fig2, ax2 = plt.subplots()
    total_regiao.plot(kind='bar', ax=ax2, color='orange')
    ax2.set_ylabel('Valor Total (R$)')
    ax2.set_xlabel('Regi√£o')
    st.pyplot(fig2)

    st.subheader("Evolu√ß√£o Mensal Geral")
    evolucao_mensal = filtered_df.groupby('M√™s')['Valor'].sum().reindex(meses)
    fig3, ax3 = plt.subplots()
    evolucao_mensal.plot(kind='line', marker='o', ax=ax3, color='green')
    ax3.set_ylabel('Valor Total (R$)')
    ax3.set_xlabel('M√™s')
    ax3.grid(True)
    st.pyplot(fig3)

    # Exporta√ß√£o para CSV
    st.sidebar.markdown("### Exportar Dados")
    csv = filtered_df.to_csv(index=False).encode('utf-8')
    st.sidebar.download_button("Baixar CSV Consolidado", data=csv, file_name='consolidado_pedidos.csv', mime='text/csv')

    # Exporta√ß√£o dos gr√°ficos para PNG
    def export_plot(fig):
        buf = BytesIO()
        fig.savefig(buf, format="png")
        buf.seek(0)
        return buf

    st.sidebar.markdown("### Exportar Gr√°ficos")
    st.sidebar.download_button("Baixar Gr√°fico Pessoa", data=export_plot(fig1), file_name="grafico_pessoa.png", mime="image/png")
    st.sidebar.download_button("Baixar Gr√°fico Regi√£o", data=export_plot(fig2), file_name="grafico_regiao.png", mime="image/png")
    st.sidebar.download_button("Baixar Gr√°fico Mensal", data=export_plot(fig3), file_name="grafico_mensal.png", mime="image/png")

    st.success("Painel atualizado com sucesso! üöÄ")

except Exception as e:
    st.error(f"Erro ao carregar a planilha do Google Sheets: {e}")
    st.stop()
